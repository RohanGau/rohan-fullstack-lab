name: Docker Build & Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v3

      - name: üî¢ Set NODE_ENV based on Branch
        id: env
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "GITHUB_REF=$GITHUB_REF"
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "env_file=.env.production" >> $GITHUB_ENV
          elif [ "$GITHUB_REF" = "refs/heads/develop" ]; then
            echo "NODE_ENV=stage" >> $GITHUB_ENV
            echo "env_file=.env.stage" >> $GITHUB_ENV
          else
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "env_file=.env" >> $GITHUB_ENV
          fi

      - name: üêõ Print resolved environment
        run: echo "Deploying to ${{ steps.env.outputs.env_name }} environment"

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üöÄ Deploy to Fly.io (Production)
        if: steps.env.outputs.env_name == 'production'
        uses: superfly/flyctl-actions@1.4
        with:
          args: deploy --config fly.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: üöÄ Deploy to Fly.io (Staging)
        if: steps.env.outputs.env_name == 'stage'
        uses: superfly/flyctl-actions@1.4
        with:
          args: deploy --config fly.stage.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: üìù Write API URL env for React Admin
        run: |
          if [ "$NODE_ENV" = "production" ]; then
            echo "REACT_APP_API_URL=https://node-backend-production-e30ea62.onrender.com" > ./apps/admin/.env
          else
            echo "REACT_APP_API_URL=https://node-backend-stage-latest.onrender.com" > ./apps/admin/.env
          fi
      - name: üöß Build Docker Image for React Admin
        run: |
          if [ "$NODE_ENV" = "production" ]; then
            IMAGE_TAG=react-admin:production
          elif [ "$NODE_ENV" = "stage" ]; then
            IMAGE_TAG=react-admin:stage
          else
            IMAGE_TAG=react-admin:latest
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Building React Admin Image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG ./apps/admin
          
      - name: üåê Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üì¶ Push Tagged Image
        run: |
          echo "Pushing: ${{ secrets.DOCKER_USERNAME }}/$IMAGE_TAG"
          docker tag $IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_TAG
